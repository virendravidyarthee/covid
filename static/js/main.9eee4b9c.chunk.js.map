{"version":3,"sources":["services/history.js","routes/route.js","containers/Home/actions.js","utils/index.js","containers/Home/reducer.js","components/styled/index.js","containers/Home/index.js","utils/constants/index.js","utils/data.js","routes/index.js","App.js","networking/index.js","containers/Home/saga.js","rootSaga.js","configureStore.js","serviceWorker.js","index.js"],"names":["history","createBrowserHistory","RouteWrapper","Component","component","rest","isPrivate","defaultProps","fetchData","country","lastNDays","n","type","payload","historicalDates","Array","from","length","_","i","moment","subtract","initialState","lastWeek","nextWeek","graphData","height","width","isPredictionsLoading","isCurrenDataLoading","crosshairValues","failureMessage","currentTotalCases","currentRecoveredCases","currentDeceasedCases","getLastWeek","state","loginReducer","getNextWeek","getIsPredictionsLoading","isPredictionsLoadingoading","getGraphData","getWidth","getHeight","getCrosshairValues","getCurrentTotalCases","getCurrentRecoveredCases","getCurrentDeceasedCases","HomeHeader","styled","div","HeaderText","p","CurrentCasesContainer","HowItWorksContainer","ColumnDiv","StandardText","h5","StandardParagraph","LargeText","CenterAligned","PredictionTimelineContainer","PredictionDay","PredictionCountText","PredictionDateText","ChartContainer","FlatCredit","HomeTag","Home","props","updateWindowDimensions","bind","this","dispatch","window","addEventListener","removeEventListener","innerWidth","innerHeight","todaysRecord","map","prediction","index","key","total_cases","date","format","onMouseLeave","margin","left","right","top","bottom","xType","onNearestX","value","values","x","toDate","y","style","fill","color","data","tickFormat","v","getDate","getMonth","tickTotal","tickSize","display","marginTop","href","title","React","connect","is_loading","Routes","path","exact","App","contentTypeHeaders","unAuthAxios","method","url","params","Axios","request","baseURL","timeout","headers","fetchCurrentData","loginSaga","action","accumulator","predictionAccumulator","rAccumulator","recordToAddToAccumulator","call","stat_by_country","forEach","record","array","nextRecord","currentRecordMoment","record_date","isSameOrBefore","push","reverse","firstTotalCases","nthTotalCases","logDifference","Math","log","parseInt","replace","logDiffByX","r","exp","meanR","average","pow","ceil","element","add","lastWeekRecord","concat","console","put","lastWeekData","nextWeekPredictions","message","todayDataResponse","currentRecord","total_recovered","total_deaths","arr","reduce","c","all","takeLatest","fork","LoginSaga","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","store","createStore","applyMiddleware","run","rootSaga","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.9eee4b9c.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\nconst history = createBrowserHistory();\nexport default history;\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default function RouteWrapper({ component: Component, isPrivate, ...rest }) {\n  const signed = true;\n\n  /**\n   * Redirect user to SignIn page if he tries to access a private      route\n   * without authentication.\n   */\n\n  if (isPrivate && !signed) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return <Route {...rest} component={Component} />;\n}\n\nRouteWrapper.propTypes = {\n  isPrivate: PropTypes.bool,\n  component: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired,\n};\nRouteWrapper.defaultProps = {\n  isPrivate: false,\n};\n","import { getLastNDays } from '../../utils';\nexport const FETCH_DATA = 'fetch_data';\nexport const FETCH_DATA_SUCCESS = 'fetch_data_success';\nexport const FETCH_DATA_FAILURE = 'fetch_data_failure';\nexport const UPDATE_DIMENSIONS = 'update_dimensions';\nexport const SET_CROSSHAIR_VALUES = 'set_crosshair_values';\nexport const CLEAR_CROSSHAIR_VALUES = 'clear_crosshair_values';\nexport const FETCH_CURRENT_DATA = 'get_current_data';\nexport const FETCH_CURRENT_DATA_SUCCESS = 'get_current_data_success';\nexport const FETCH_CURRENT_DATA_FAILURE = 'get_current_data_failure';\n\nexport function fetchData(country, lastNDays) {\n  let historicalDates = getLastNDays(lastNDays);\n  return { type: FETCH_DATA, payload: { country, historicalDates } };\n}\n\nexport function updateDimensions(width, height) {\n  return { type: UPDATE_DIMENSIONS, payload: { width, height } };\n}\n\nexport function setCrosshairValues(values) {\n  return { type: SET_CROSSHAIR_VALUES, payload: { values } };\n}\n\nexport function clearCrosshairValues() {\n  return { type: CLEAR_CROSSHAIR_VALUES, payload: {} };\n}\n\nexport function getCurrentData(country) {\n  return { type: FETCH_CURRENT_DATA, payload: { country } };\n}\n","import moment from 'moment';\n\nexport function isEmpty(text) {\n  if (text == null || text.trim() === '') {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function isValidEmail(text) {\n  // eslint-disable-next-line\n  let reg = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  if (reg.test(text) === false) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nexport function isValidPhoneNumber(text) {\n  // eslint-disable-next-line\n  const reg = /(([+][(]?[0-9]{1,3}[)]?)|([(]?[0-9]{4}[)]?))\\s*[)]?[-\\s\\.]?[(]?[0-9]{1,3}[)]?([-\\s\\.]?[0-9]{3})([-\\s\\.]?[0-9]{3,4})/;\n  if (reg.test(text) === false) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nexport function isNumeric(text) {\n  if (isNaN(text)) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nexport function isListEmpty(list) {\n  if (list && list.length) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nexport function getLastElementOf(list) {\n  if (list && list.length) {\n    return list.slice(-1)[0];\n  } else {\n    return null;\n  }\n}\n\nexport function getCurrentDate() {\n  return new Date().getDate();\n}\n\nexport function getCurrentMillis() {\n  return Date.now();\n}\n\nexport function hexToRgbA(hex, alpha) {\n  var c;\n  if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n    c = hex.substring(1).split('');\n    if (c.length === 3) {\n      c = [c[0], c[0], c[1], c[1], c[2], c[2]];\n    }\n    c = '0x' + c.join('');\n    return (\n      'rgba(' +\n      [(c >> 16) & 255, (c >> 8) & 255, c & 255].join(',') + // eslint-disable-line no-bitwise\n      `,${alpha})`\n    );\n  }\n  throw new Error('Bad Hex');\n}\n\nexport function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const randomColor = () =>\n  // eslint-disable-next-line no-bitwise\n  ('#' + ((Math.random() * 0xffffff) << 0).toString(16) + '000000').slice(0, 7);\n\nexport const truncate = (input, truncateAfter) => {\n  if (input.length > truncateAfter) {\n    return input.toString().substring(0, truncateAfter) + '...';\n  } else {\n    return input;\n  }\n};\n\nexport const getLastNDays = n => {\n  return Array.from({ length: n }, (_, i) => {\n    return moment().subtract(i, 'days');\n  });\n};\n\nexport const getNthDay = n => {\n  return moment().add(n, 'days');\n};\n","import {\n  FETCH_DATA,\n  FETCH_DATA_SUCCESS,\n  FETCH_DATA_FAILURE,\n  UPDATE_DIMENSIONS,\n  SET_CROSSHAIR_VALUES,\n  CLEAR_CROSSHAIR_VALUES,\n  FETCH_CURRENT_DATA,\n  FETCH_CURRENT_DATA_SUCCESS,\n} from './actions';\n\nconst initialState = {\n  lastWeek: [],\n  nextWeek: [],\n  graphData: [],\n  height: 800,\n  width: 400,\n  isPredictionsLoading: true,\n  isCurrenDataLoading: true,\n  crosshairValues: [],\n  failureMessage: '',\n  currentTotalCases: null,\n  currentRecoveredCases: null,\n  currentDeceasedCases: null,\n};\n\nexport default function loginReducer(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_DATA:\n      return {\n        ...state,\n        is_loading: true,\n      };\n    case FETCH_DATA_SUCCESS:\n      return {\n        ...state,\n        lastWeek: action.payload.lastWeekData,\n        nextWeek: action.payload.nextWeekPredictions,\n        graphData: action.payload.graphData,\n        isPredictionsLoading: false,\n      };\n    case FETCH_DATA_FAILURE:\n      return {\n        ...state,\n        is_loading: false,\n        failureMessage: action.payload.message,\n      };\n    case UPDATE_DIMENSIONS:\n      return { ...state, height: action.payload.height, width: action.payload.width };\n    case SET_CROSSHAIR_VALUES:\n      return { ...state, crosshairValues: action.payload.values };\n    case CLEAR_CROSSHAIR_VALUES:\n      return { ...state, crosshairValues: [] };\n    case FETCH_CURRENT_DATA:\n      return {\n        ...state,\n        isCurrenDataLoading: true,\n      };\n    case FETCH_CURRENT_DATA_SUCCESS:\n      return {\n        ...state,\n        currentTotalCases: action.payload.currentTotalCases,\n        currentRecoveredCases: action.payload.currentRecoveredCases,\n        currentDeceasedCases: action.payload.currentDeceasedCases,\n        isCurrenDataLoading: false,\n      };\n    default:\n      return state;\n  }\n}\n\nexport function getLastWeek(state) {\n  return state.loginReducer.lastWeek;\n}\n\nexport function getNextWeek(state) {\n  return state.loginReducer.nextWeek;\n}\n\nexport function getIsPredictionsLoading(state) {\n  return state.loginReducer.isPredictionsLoadingoading;\n}\n\nexport function getIsCurrentDataLoading(state) {\n  return state.loginReducer.isCurrenDataLoading;\n}\n\nexport function getGraphData(state) {\n  return state.loginReducer.graphData;\n}\n\nexport function getWidth(state) {\n  return state.loginReducer.width;\n}\n\nexport function getHeight(state) {\n  return state.loginReducer.height;\n}\n\nexport function getCrosshairValues(state) {\n  return state.loginReducer.crosshairValues;\n}\n\nexport function getCurrentTotalCases(state) {\n  return state.loginReducer.currentTotalCases;\n}\n\nexport function getCurrentRecoveredCases(state) {\n  return state.loginReducer.currentRecoveredCases;\n}\n\nexport function getCurrentDeceasedCases(state) {\n  return state.loginReducer.currentDeceasedCases;\n}\n","import styled from 'styled-components';\n\nexport const HomeHeader = styled.div`\n  margin-left: 16px;\n  margin-right: 16px;\n  width: '100%';\n`;\n\nexport const HeaderText = styled.p`\n  font-size: 1.2rem;\n  color: white;\n  font-weight: bold;\n  text-align: center;\n`;\n\nexport const CurrentCasesContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  margin-right: 16px;\n  margin-left: 16px;\n  width: '100%';\n  border-radius: 8px;\n  border: 0.5px solid yellow;\n`;\n\nexport const HowItWorksContainer = styled.div`\n  margin-right: 16px;\n  margin-left: 16px;\n  width: '100%';\n  border-radius: 8px;\n  border: 0.5px solid yellow;\n`;\n\nexport const ColumnDiv = styled.div`\n  flex-direction: column;\n`;\n\nexport const StandardText = styled.h5`\n  color: white;\n  text-align: center;\n  margin-left: 4px;\n  margin-right: 4px;\n`;\n\nexport const StandardParagraph = styled.p`\n  margin-top: 16px;\n  color: white;\n  text-align: center;\n  font-size: 11px;\n`;\n\nexport const LargeText = styled.p`\n  color: white;\n  text-align: center;\n`;\n\nexport const CenterAligned = styled.div`\n  margin: auto;\n`;\n\nexport const FullWidthDiv = styled.div`\n  width: 100%;\n`;\n\nexport const PredictionTimelineContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  margin-left: 2px;\n  margin-right: 2px;\n`;\n\nexport const PredictionDay = styled.div`\n  flex-direction: column;\n`;\n\nexport const PredictionCountText = styled.p`\n  color: yellow;\n  text-align: center;\n  font-size: 0.8rem;\n  margin-bottom: 16px;\n`;\n\nexport const PredictionDateText = styled.p`\n  color: white;\n  text-align: center;\n  font-size: 0.5rem;\n`;\n\nexport const ChartContainer = styled.div`\n  color: white;\n  margin-top: 16px;\n`;\n\nexport const FlatCredit = styled.div`\n  font-size: 9px;\n  margin-top: 32px;\n  text-align: center;\n`;\n","import React from 'react';\nimport {\n  getLastWeek,\n  getNextWeek,\n  getGraphData,\n  getHeight,\n  getWidth,\n  getCrosshairValues,\n  getCurrentTotalCases,\n  getCurrentDeceasedCases,\n  getCurrentRecoveredCases,\n  getIsPredictionsLoading,\n} from './reducer';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  fetchData,\n  updateDimensions,\n  setCrosshairValues,\n  clearCrosshairValues,\n  getCurrentData,\n} from './actions';\nimport styled from 'styled-components';\nimport { colors } from '../../utils/constants';\nimport {\n  CurrentCasesContainer,\n  HomeHeader,\n  HeaderText,\n  StandardText,\n  LargeText,\n  CenterAligned,\n  PredictionTimelineContainer,\n  PredictionDay,\n  PredictionCountText,\n  PredictionDateText,\n  ChartContainer,\n  StandardParagraph,\n  FlatCredit,\n  ColumnDiv,\n  HowItWorksContainer,\n} from '../../components/styled';\nimport Loader from 'react-loader-spinner';\nimport { XYPlot, HorizontalGridLines, XAxis, YAxis, LineMarkSeries, Crosshair } from 'react-vis';\nimport 'react-vis/dist/style.css';\nimport {\n  pageTitle,\n  currentNumberOfCases as currentNumberOfCasesLabel,\n  totalProjections as totalProjectionsLabel,\n  howItWorks,\n  explanation,\n  growthRateSource,\n  disclaimerTitle,\n  disclaimerBody,\n  currentRecoveredCases,\n  currentDeceasedCases,\n} from '../../utils/data';\n\nconst HomeTag = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  background: ${colors.pageBackground};\n  overflow-y: scroll;\n`;\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.dispatch(getCurrentData('india'));\n    this.props.dispatch(fetchData('india', 10));\n    window.addEventListener('resize', this.updateWindowDimensions.bind(this));\n    this.updateWindowDimensions();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions.bind(this));\n  }\n\n  updateWindowDimensions() {\n    this.props.dispatch(updateDimensions(window.innerWidth, window.innerHeight));\n  }\n  render() {\n    let todaysRecord = this.props.lastWeek[this.props.lastWeek.length - 1];\n    const getPredictionDays = predictionArray => {\n      return predictionArray.map((prediction, index) => {\n        return (\n          <PredictionDay key={index}>\n            <PredictionCountText>{prediction.total_cases}</PredictionCountText>\n            <PredictionDateText>{prediction.date.format('ddd,D/M')}</PredictionDateText>\n          </PredictionDay>\n        );\n      });\n    };\n    return (\n      <HomeTag>\n        <HomeHeader>\n          <HeaderText>{pageTitle}</HeaderText>\n        </HomeHeader>\n        <CurrentCasesContainer>\n          <ColumnDiv>\n            <StandardText>{currentNumberOfCasesLabel}</StandardText>\n            <LargeText>{this.props.currentTotalCases}</LargeText>\n          </ColumnDiv>\n          <ColumnDiv>\n            <StandardText>{currentRecoveredCases}</StandardText>\n            <LargeText>{this.props.currentRecoveredCases}</LargeText>\n          </ColumnDiv>\n          <ColumnDiv>\n            <StandardText>{currentDeceasedCases}</StandardText>\n            <LargeText>{this.props.currentDeceasedCases}</LargeText>\n          </ColumnDiv>\n        </CurrentCasesContainer>\n        {todaysRecord ? (\n          <div>\n            <StandardParagraph>{totalProjectionsLabel}</StandardParagraph>\n            <PredictionTimelineContainer>\n              {getPredictionDays(this.props.nextWeek)}\n            </PredictionTimelineContainer>\n            <ChartContainer>\n              <XYPlot\n                onMouseLeave={() => {\n                  this.props.dispatch(clearCrosshairValues());\n                }}\n                margin={{ left: this.props.width * 0.11, right: 10, top: 30, bottom: 25 }}\n                xType=\"time\"\n                height={this.props.height * 0.45}\n                width={this.props.width * 0.95}>\n                <LineMarkSeries\n                  onNearestX={value => {\n                    this.props.dispatch(\n                      setCrosshairValues([\n                        {\n                          x: value.x.toDate(),\n                          y: value.y,\n                        },\n                      ]),\n                    );\n                  }}\n                  style={{ fill: 'none' }}\n                  color=\"yellow\"\n                  data={this.props.graphData}\n                />\n                <HorizontalGridLines />\n                <Crosshair values={this.props.crosshairValues}></Crosshair>\n                <XAxis\n                  tickFormat={v => {\n                    return `${v.getDate()}/${v.getMonth() + 1}`;\n                  }}\n                  tickTotal={5}\n                />\n                <YAxis tickSize={1} />\n              </XYPlot>\n            </ChartContainer>\n            {this.props.height > 552 ? (\n              <div style={{ display: 'block' }}>\n                <HowItWorksContainer style={{ marginTop: '16px' }}>\n                  <StandardText>{howItWorks}</StandardText>\n                  <StandardText>{explanation}</StandardText>\n                  <StandardParagraph>{growthRateSource}</StandardParagraph>\n                </HowItWorksContainer>\n                <StandardParagraph>{disclaimerTitle}</StandardParagraph>\n                <StandardParagraph>{disclaimerBody}</StandardParagraph>\n                <FlatCredit>\n                  Icons made by{' '}\n                  <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">\n                    Freepik\n                  </a>{' '}\n                  from{' '}\n                  <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n                    www.flaticon.com\n                  </a>\n                </FlatCredit>\n              </div>\n            ) : null}\n          </div>\n        ) : (\n          <CenterAligned>\n            <Loader\n              style={{ margin: 'auto' }}\n              type=\"MutatingDots\"\n              color=\"yellow\"\n              height={100}\n              width={100}\n            />\n            <StandardText>Analysing.</StandardText>\n            <StandardParagraph>Please stay on this page...</StandardParagraph>\n          </CenterAligned>\n        )}\n      </HomeTag>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  lastWeek: getLastWeek(state),\n  nextWeek: getNextWeek(state),\n  is_loading: getIsPredictionsLoading(state),\n  graphData: getGraphData(state),\n  height: getHeight(state),\n  width: getWidth(state),\n  crosshairValues: getCrosshairValues(state),\n  currentTotalCases: getCurrentTotalCases(state),\n  currentRecoveredCases: getCurrentRecoveredCases(state),\n  currentDeceasedCases: getCurrentDeceasedCases(state),\n});\n\nHome.propTypes = {\n  dispatch: PropTypes.func,\n  lastWeek: PropTypes.array,\n  nextWeek: PropTypes.array,\n  is_loading: PropTypes.bool,\n  height: PropTypes.number,\n  width: PropTypes.number,\n  crosshairValues: PropTypes.array,\n  graphData: PropTypes.array,\n  currentTotalCases: PropTypes.string,\n  currentRecoveredCases: PropTypes.string,\n  currentDeceasedCases: PropTypes.string,\n};\n\nexport default connect(mapStateToProps)(Home);\n","export const colors = {\n  white: '#ffffff',\n  pageBackground: '#212121',\n  black: '#000000',\n  blue: '#043dba',\n  navyBlue: '#30304f',\n  skyBlue: '#3aa6cc',\n  green: '#04b6a5',\n  yellow: '#f8c340',\n  red: '#ed574c',\n  lightGray: '#e1e1db',\n  semiTransparentGrey: 'rgba(225,225,219,0.2)',\n};\n\nexport const apiKey = '5aa871fb55msha1efb1e49628ad0p15ec67jsn429c11038010';\n","export const pageTitle = 'Covid-19 predictions in India';\nexport const currentNumberOfCases = 'Total cases';\nexport const currentRecoveredCases = 'Recovered';\nexport const currentDeceasedCases = 'Deceased';\nexport const totalProjections =\n  'Confirmed total cases projections over the coming week: (±70 cases)';\nexport const howItWorks = 'How it works';\nexport const explanation =\n  \"The past week's data is analysed to determine the growth rate of total confirmed \" +\n  \"cases. A mean of that growth rate is then used to project the coming week's outcome\";\nexport const growthRateSource = 'Source: https://en.wikipedia.org/wiki/Exponential_growth';\nexport const disclaimerTitle = ' Disclaimer';\nexport const disclaimerBody =\n  'The developer holds no responsibility of the data displayed on this website. This data ' +\n  'is merely speculative and is just a projection based on the current trend of change. ' +\n  'For educational puposes only. Do your part. STAY HOME.';\n","import React from 'react';\nimport { Switch } from 'react-router-dom';\nimport Route from './route';\n\nimport Home from '../containers/Home';\n\nexport function Routes() {\n  return (\n    <Switch>\n      <Route path=\"/covid\" exact component={Home} />\n    </Switch>\n  );\n}\n\nexport default Routes;\n","import React from 'react';\nimport './App.css';\nimport { Router } from 'react-router-dom';\nimport history from './services/history';\nimport { Routes } from './routes';\n\nfunction App() {\n  return (\n    <Router history={history}>\n      <Routes />\n    </Router>\n  );\n}\n\nexport default App;\n","import Axios from 'axios';\nimport { apiKey } from '../utils/constants';\n\nconst APITimeout = 3000;\n\nconst baseUrl = 'https://coronavirus-monitor.p.rapidapi.com/';\n\n//By country, by date\nexport const getDataByCountryAndDate = 'coronavirus/history_by_country_and_date.php';\n\n//By country\nexport const getDataByCountry = 'coronavirus/cases_by_particular_country.php';\n\nconst contentTypeHeaders = {\n  'content-type': 'application/octet-stream',\n  'x-rapidapi-host': 'coronavirus-monitor.p.rapidapi.com',\n  'x-rapidapi-key': apiKey,\n};\n\nexport const unAuthAxios = (method, url, params) =>\n  Axios.request({\n    method: method,\n    baseURL: baseUrl,\n    url: url,\n    timeout: APITimeout,\n    headers: contentTypeHeaders,\n    params: params,\n  });\n","import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport {\n  FETCH_DATA,\n  FETCH_DATA_SUCCESS,\n  FETCH_DATA_FAILURE,\n  FETCH_CURRENT_DATA,\n  FETCH_CURRENT_DATA_SUCCESS,\n} from './actions';\nimport { unAuthAxios, getDataByCountryAndDate, getDataByCountry } from '../../networking';\nimport { getNthDay } from '../../utils';\nimport moment from 'moment';\n\nfunction* fetchData(action) {\n  try {\n    let accumulator = [];\n    var predictionAccumulator = [];\n    let rAccumulator = [];\n    let recordToAddToAccumulator = null;\n    let { data: countryResponse } = yield call(unAuthAxios, 'get', getDataByCountry, {\n      country: action.payload.country,\n    });\n    countryResponse.stat_by_country.forEach((record, index, array) => {\n      if (index + 1 < array.length) {\n        let nextRecord = array[index + 1];\n        let currentRecordMoment = moment(record.record_date);\n        let nextRecordMoment = moment(nextRecord.record_date);\n        if (!nextRecordMoment.isSameOrBefore(currentRecordMoment, 'day')) {\n          recordToAddToAccumulator = record;\n        }\n      } else {\n        recordToAddToAccumulator = record;\n      }\n      if (recordToAddToAccumulator != null) {\n        accumulator.push(recordToAddToAccumulator);\n        recordToAddToAccumulator = null;\n      }\n    });\n    accumulator = accumulator.reverse();\n    let firstTotalCases = accumulator[accumulator.length - 1].total_cases;\n    for (let index = accumulator.length - 2; index > -1; index--) {\n      const record = accumulator[index];\n      let nthTotalCases = record.total_cases;\n      let logDifference =\n        Math.log(parseInt(nthTotalCases.replace(/,/g, ''))) -\n        Math.log(parseInt(firstTotalCases.replace(/,/g, '')));\n      // eslint-disable-next-line\n    let logDiffByX = logDifference / ((accumulator.length - 1) - index);\n      let r = Math.exp(logDiffByX) - 1;\n      rAccumulator.push(r);\n    }\n    let meanR = average(rAccumulator);\n    Array.from({ length: 7 }, (_, i) => {\n      let prediction = firstTotalCases * Math.pow(1 + meanR, i + accumulator.length);\n      predictionAccumulator.push(Math.ceil(prediction));\n      return null;\n    });\n    predictionAccumulator = predictionAccumulator.map((element, index) => {\n      return {\n        total_cases: element,\n        date: getNthDay(index + 1),\n      };\n    });\n    let lastWeekRecord = accumulator.map(record => {\n      return {\n        total_cases: parseInt(record.total_cases.replace(/,/g, '')),\n        date: moment(record.record_date, 'YYYY-MM-DD'),\n      };\n    });\n    let graphData = lastWeekRecord.reverse().concat(predictionAccumulator);\n    console.log(`Mean R: ${meanR}`);\n    yield put({\n      type: FETCH_DATA_SUCCESS,\n      payload: {\n        lastWeekData: lastWeekRecord,\n        nextWeekPredictions: predictionAccumulator,\n        graphData: graphData.map(data => ({\n          x: data.date,\n          y: data.total_cases,\n        })),\n        is_loading: false,\n      },\n    });\n  } catch (error) {\n    yield put({\n      type: FETCH_DATA_FAILURE,\n      payload: {\n        is_loading: false,\n        message: 'Something went wrong, Please refresh.',\n      },\n    });\n  }\n}\n\nfunction* fetchCurrentData(action) {\n  try {\n    let todayDataResponse = yield call(unAuthAxios, 'get', getDataByCountryAndDate, {\n      country: action.payload.country,\n      date: moment().format('YYYY-MM-DD'),\n    });\n    if (todayDataResponse.data.stat_by_country.length !== 0) {\n      let currentRecord =\n        todayDataResponse.data.stat_by_country[todayDataResponse.data.stat_by_country.length - 1];\n      yield put({\n        type: FETCH_CURRENT_DATA_SUCCESS,\n        payload: {\n          currentTotalCases: currentRecord.total_cases,\n          currentRecoveredCases: currentRecord.total_recovered,\n          currentDeceasedCases: currentRecord.total_deaths,\n        },\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: FETCH_DATA_FAILURE,\n      payload: {\n        message: 'Current record loading failed. Please refresh',\n      },\n    });\n  }\n}\n\nconst average = arr => arr.reduce((p, c) => p + c, 0) / arr.length;\n\nexport default function* loginSaga() {\n  yield all([takeLatest(FETCH_DATA, fetchData), takeLatest(FETCH_CURRENT_DATA, fetchCurrentData)]);\n}\n","import { fork, all } from 'redux-saga/effects';\nimport LoginSaga from './containers/Home/saga';\n\nexport default function*() {\n  yield all([fork(LoginSaga)]);\n}\n","import createSagaMiddleware from 'redux-saga';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport rootSaga from './rootSaga';\nimport loginReducer from '../src/containers/Home/reducer';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst rootReducer = combineReducers({\n  loginReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './configureStore';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}