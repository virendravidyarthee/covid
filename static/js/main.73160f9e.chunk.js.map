{"version":3,"sources":["services/history.js","routes/route.js","containers/Home/actions.js","utils/index.js","containers/Home/reducer.js","components/styled/index.js","containers/Home/index.js","utils/constants/index.js","utils/data.js","routes/index.js","App.js","networking/index.js","containers/Home/saga.js","rootSaga.js","configureStore.js","serviceWorker.js","index.js"],"names":["history","createBrowserHistory","RouteWrapper","Component","component","rest","isPrivate","defaultProps","fetchData","country","lastNDays","n","type","payload","historicalDates","Array","from","length","_","i","moment","subtract","initialState","lastWeek","nextWeek","graphData","height","width","is_loading","crosshairValues","getLastWeek","state","loginReducer","getNextWeek","getIsLoading","getGraphData","getWidth","getHeight","getCrosshairValues","HomeHeader","styled","div","HeaderText","p","CurrentCasesContainer","StandardText","h4","StandardParagraph","LargeText","h1","CenterAligned","PredictionTimelineContainer","PredictionDay","PredictionCountText","PredictionDateText","ChartContainer","FlatCredit","HomeTag","Home","props","updateWindowDimensions","bind","this","dispatch","window","addEventListener","removeEventListener","innerWidth","innerHeight","todaysRecord","total_cases","map","prediction","index","key","date","format","onMouseLeave","margin","left","right","top","bottom","xType","onNearestX","value","values","x","toDate","y","style","fill","color","data","tickFormat","v","getDate","getMonth","tickTotal","tickSize","marginTop","href","title","React","connect","Routes","path","exact","App","contentTypeHeaders","unAuthAxios","method","url","params","Axios","request","baseURL","timeout","headers","loginSaga","action","accumulator","predictionAccumulator","rAccumulator","call","countryHistoricalStats","stat_by_country","push","firstTotalCases","record","nthTotalCases","logDifference","Math","log","logDiffByX","r","exp","meanR","average","pow","ceil","element","add","lastWeekRecord","record_date","reverse","concat","console","put","lastWeekData","nextWeekPredictions","error","arr","reduce","c","takeLatest","all","fork","LoginSaga","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","store","createStore","applyMiddleware","run","rootSaga","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.73160f9e.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\nconst history = createBrowserHistory();\nexport default history;\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default function RouteWrapper({ component: Component, isPrivate, ...rest }) {\n  const signed = true;\n\n  /**\n   * Redirect user to SignIn page if he tries to access a private      route\n   * without authentication.\n   */\n\n  if (isPrivate && !signed) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return <Route {...rest} component={Component} />;\n}\n\nRouteWrapper.propTypes = {\n  isPrivate: PropTypes.bool,\n  component: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired,\n};\nRouteWrapper.defaultProps = {\n  isPrivate: false,\n};\n","import { getLastNDays } from '../../utils';\nexport const FETCH_DATA = 'fetch_data';\nexport const FETCH_DATA_SUCCESS = 'fetch_data_success';\nexport const FETCH_DATA_FAILURE = 'fetch_data_failure';\nexport const UPDATE_DIMENSIONS = 'update_dimensions';\nexport const SET_CROSSHAIR_VALUES = 'set_crosshair_values';\nexport const CLEAR_CROSSHAIR_VALUES = 'clear_crosshair_values';\n\nexport function fetchData(country, lastNDays) {\n  let historicalDates = getLastNDays(lastNDays);\n  return { type: FETCH_DATA, payload: { country, historicalDates } };\n}\n\nexport function updateDimensions(width, height) {\n  return { type: UPDATE_DIMENSIONS, payload: { width, height } };\n}\n\nexport function setCrosshairValues(values) {\n  return { type: SET_CROSSHAIR_VALUES, payload: { values } };\n}\n\nexport function clearCrosshairValues() {\n  return { type: CLEAR_CROSSHAIR_VALUES, payload: {} };\n}\n","import moment from 'moment';\n\nexport function isEmpty(text) {\n  if (text == null || text.trim() === '') {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function isValidEmail(text) {\n  // eslint-disable-next-line\n  let reg = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  if (reg.test(text) === false) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nexport function isValidPhoneNumber(text) {\n  // eslint-disable-next-line\n  const reg = /(([+][(]?[0-9]{1,3}[)]?)|([(]?[0-9]{4}[)]?))\\s*[)]?[-\\s\\.]?[(]?[0-9]{1,3}[)]?([-\\s\\.]?[0-9]{3})([-\\s\\.]?[0-9]{3,4})/;\n  if (reg.test(text) === false) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nexport function isNumeric(text) {\n  if (isNaN(text)) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nexport function isListEmpty(list) {\n  if (list && list.length) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nexport function getLastElementOf(list) {\n  if (list && list.length) {\n    return list.slice(-1)[0];\n  } else {\n    return null;\n  }\n}\n\nexport function getCurrentDate() {\n  return new Date().getDate();\n}\n\nexport function getCurrentMillis() {\n  return Date.now();\n}\n\nexport function hexToRgbA(hex, alpha) {\n  var c;\n  if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n    c = hex.substring(1).split('');\n    if (c.length === 3) {\n      c = [c[0], c[0], c[1], c[1], c[2], c[2]];\n    }\n    c = '0x' + c.join('');\n    return (\n      'rgba(' +\n      [(c >> 16) & 255, (c >> 8) & 255, c & 255].join(',') + // eslint-disable-line no-bitwise\n      `,${alpha})`\n    );\n  }\n  throw new Error('Bad Hex');\n}\n\nexport function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const randomColor = () =>\n  // eslint-disable-next-line no-bitwise\n  ('#' + ((Math.random() * 0xffffff) << 0).toString(16) + '000000').slice(0, 7);\n\nexport const truncate = (input, truncateAfter) => {\n  if (input.length > truncateAfter) {\n    return input.toString().substring(0, truncateAfter) + '...';\n  } else {\n    return input;\n  }\n};\n\nexport const getLastNDays = n => {\n  return Array.from({ length: n }, (_, i) => {\n    return moment().subtract(i, 'days');\n  });\n};\n\nexport const getNthDay = n => {\n  return moment().add(n, 'days');\n};\n","import {\n  FETCH_DATA,\n  FETCH_DATA_SUCCESS,\n  FETCH_DATA_FAILURE,\n  UPDATE_DIMENSIONS,\n  SET_CROSSHAIR_VALUES,\n  CLEAR_CROSSHAIR_VALUES,\n} from './actions';\n\nconst initialState = {\n  lastWeek: [],\n  nextWeek: [],\n  graphData: [],\n  height: 800,\n  width: 400,\n  is_loading: false,\n  crosshairValues: [],\n};\n\nexport default function loginReducer(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_DATA:\n      return {\n        ...state,\n        is_loading: true,\n      };\n    case FETCH_DATA_SUCCESS:\n      return {\n        ...state,\n        lastWeek: action.payload.lastWeekData,\n        nextWeek: action.payload.nextWeekPredictions,\n        graphData: action.payload.graphData,\n      };\n    case FETCH_DATA_FAILURE:\n      return { ...state, is_loading: false };\n    case UPDATE_DIMENSIONS:\n      return { ...state, height: action.payload.height, width: action.payload.width };\n    case SET_CROSSHAIR_VALUES:\n      return { ...state, crosshairValues: action.payload.values };\n    case CLEAR_CROSSHAIR_VALUES:\n      return { ...state, crosshairValues: [] };\n    default:\n      return state;\n  }\n}\n\nexport function getLastWeek(state) {\n  return state.loginReducer.lastWeek;\n}\n\nexport function getNextWeek(state) {\n  return state.loginReducer.nextWeek;\n}\n\nexport function getIsLoading(state) {\n  return state.loginReducer.is_loading;\n}\n\nexport function getGraphData(state) {\n  return state.loginReducer.graphData;\n}\n\nexport function getWidth(state) {\n  return state.loginReducer.width;\n}\n\nexport function getHeight(state) {\n  return state.loginReducer.height;\n}\n\nexport function getCrosshairValues(state) {\n  return state.loginReducer.crosshairValues;\n}\n","import styled from 'styled-components';\n\nexport const HomeHeader = styled.div`\n  margin-left: 16px;\n  margin-right: 16px;\n  width: '100%';\n`;\n\nexport const HeaderText = styled.p`\n  font-size: 1.2rem;\n  color: white;\n  font-weight: bold;\n  text-align: center;\n`;\n\nexport const CurrentCasesContainer = styled.div`\n  margin-right: 16px;\n  margin-left: 16px;\n  width: '100%';\n  border-radius: 8px;\n  border: 0.5px solid yellow;\n`;\n\nexport const StandardText = styled.h4`\n  color: white;\n  text-align: center;\n  margin-left: 4px;\n  margin-right: 4px;\n`;\n\nexport const StandardParagraph = styled.p`\n  margin-top: 16px;\n  color: white;\n  text-align: center;\n  font-size: 11px;\n`;\n\nexport const LargeText = styled.h1`\n  color: white;\n  text-align: center;\n`;\n\nexport const CenterAligned = styled.div`\n  margin: auto;\n`;\n\nexport const PredictionTimelineContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n  margin-left: 2px;\n  margin-right: 2px;\n`;\n\nexport const PredictionDay = styled.div`\n  flex-direction: column;\n`;\n\nexport const PredictionCountText = styled.p`\n  color: yellow;\n  text-align: center;\n  font-size: 0.8rem;\n  margin-bottom: 16px;\n`;\n\nexport const PredictionDateText = styled.p`\n  color: white;\n  text-align: center;\n  font-size: 0.5rem;\n`;\n\nexport const ChartContainer = styled.div`\n  color: white;\n  margin-top: 16px;\n`;\n\nexport const FlatCredit = styled.div`\n  font-size: 9px;\n  margin-top: 32px;\n  text-align: center;\n`;\n","import React from 'react';\nimport {\n  getLastWeek,\n  getNextWeek,\n  getIsLoading,\n  getGraphData,\n  getHeight,\n  getWidth,\n  getCrosshairValues,\n} from './reducer';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchData, updateDimensions, setCrosshairValues, clearCrosshairValues } from './actions';\nimport styled from 'styled-components';\nimport { colors } from '../../utils/constants';\nimport {\n  CurrentCasesContainer,\n  HomeHeader,\n  HeaderText,\n  StandardText,\n  LargeText,\n  CenterAligned,\n  PredictionTimelineContainer,\n  PredictionDay,\n  PredictionCountText,\n  PredictionDateText,\n  ChartContainer,\n  StandardParagraph,\n  FlatCredit,\n} from '../../components/styled';\nimport Loader from 'react-loader-spinner';\nimport { XYPlot, HorizontalGridLines, XAxis, YAxis, LineMarkSeries, Crosshair } from 'react-vis';\nimport 'react-vis/dist/style.css';\nimport {\n  pageTitle,\n  currentNumberOfCases,\n  totalProjections,\n  howItWorks,\n  explanation,\n  growthRateSource,\n  disclaimerTitle,\n  disclaimerBody,\n} from '../../utils/data';\n\nconst HomeTag = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  background: ${colors.pageBackground};\n  overflow-y: scroll;\n`;\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.dispatch(fetchData('india', 10));\n    window.addEventListener('resize', this.updateWindowDimensions.bind(this));\n    this.updateWindowDimensions();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions.bind(this));\n  }\n\n  updateWindowDimensions() {\n    this.props.dispatch(updateDimensions(window.innerWidth, window.innerHeight));\n  }\n  render() {\n    let todaysRecord = this.props.lastWeek[this.props.lastWeek.length - 1];\n    const getPredictionDays = predictionArray => {\n      return predictionArray.map((prediction, index) => {\n        return (\n          <PredictionDay key={index}>\n            <PredictionCountText>{prediction.total_cases}</PredictionCountText>\n            <PredictionDateText>{prediction.date.format('ddd,D/M')}</PredictionDateText>\n          </PredictionDay>\n        );\n      });\n    };\n    if (!todaysRecord) {\n      return (\n        <HomeTag>\n          <CenterAligned>\n            <Loader type=\"MutatingDots\" color=\"yellow\" height={100} width={100} />\n            <StandardText>Calculating...</StandardText>\n          </CenterAligned>\n        </HomeTag>\n      );\n    } else {\n      return (\n        <HomeTag>\n          <HomeHeader>\n            <HeaderText>{pageTitle}</HeaderText>\n          </HomeHeader>\n          <CurrentCasesContainer>\n            <StandardText>{currentNumberOfCases}</StandardText>\n            <LargeText>{todaysRecord.total_cases}</LargeText>\n          </CurrentCasesContainer>\n          <StandardParagraph>{totalProjections}</StandardParagraph>\n          <PredictionTimelineContainer>\n            {getPredictionDays(this.props.nextWeek)}\n          </PredictionTimelineContainer>\n          <ChartContainer>\n            <XYPlot\n              onMouseLeave={() => {\n                this.props.dispatch(clearCrosshairValues());\n              }}\n              margin={{ left: this.props.width * 0.11, right: 10, top: 50, bottom: 25 }}\n              xType=\"time\"\n              height={this.props.height * 0.45}\n              width={this.props.width * 0.95}>\n              <LineMarkSeries\n                onNearestX={value => {\n                  this.props.dispatch(\n                    setCrosshairValues([\n                      {\n                        x: value.x.toDate(),\n                        y: value.y,\n                      },\n                    ]),\n                  );\n                }}\n                style={{ fill: 'none' }}\n                color=\"yellow\"\n                data={this.props.graphData}\n              />\n              <HorizontalGridLines />\n              <Crosshair values={this.props.crosshairValues}></Crosshair>\n              <XAxis\n                tickFormat={v => {\n                  return `${v.getDate()}/${v.getMonth() + 1}`;\n                }}\n                tickTotal={5}\n              />\n              <YAxis tickSize={1} />\n            </XYPlot>\n          </ChartContainer>\n          <CurrentCasesContainer style={{ marginTop: '16px' }}>\n            <StandardText>{howItWorks}</StandardText>\n            <StandardText>{explanation}</StandardText>\n            <StandardParagraph>{growthRateSource}</StandardParagraph>\n          </CurrentCasesContainer>\n          <div>\n            <StandardParagraph>{disclaimerTitle}</StandardParagraph>\n            <StandardParagraph>{disclaimerBody}</StandardParagraph>\n            <FlatCredit>\n              Icons made by{' '}\n              <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">\n                Freepik\n              </a>{' '}\n              from{' '}\n              <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n                www.flaticon.com\n              </a>\n            </FlatCredit>\n          </div>\n        </HomeTag>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = state => ({\n  lastWeek: getLastWeek(state),\n  nextWeek: getNextWeek(state),\n  is_loading: getIsLoading(state),\n  graphData: getGraphData(state),\n  height: getHeight(state),\n  width: getWidth(state),\n  crosshairValues: getCrosshairValues(state),\n});\n\nHome.propTypes = {\n  dispatch: PropTypes.func,\n  lastWeek: PropTypes.array,\n  nextWeek: PropTypes.array,\n  is_loading: PropTypes.bool,\n  height: PropTypes.number,\n  width: PropTypes.number,\n  crosshairValues: PropTypes.array,\n  graphData: PropTypes.array,\n};\n\nexport default connect(mapStateToProps)(Home);\n","export const colors = {\n  white: '#ffffff',\n  pageBackground: '#212121',\n  black: '#000000',\n  blue: '#043dba',\n  navyBlue: '#30304f',\n  skyBlue: '#3aa6cc',\n  green: '#04b6a5',\n  yellow: '#f8c340',\n  red: '#ed574c',\n  lightGray: '#e1e1db',\n  semiTransparentGrey: 'rgba(225,225,219,0.2)',\n};\n\nexport const apiKey = '5aa871fb55msha1efb1e49628ad0p15ec67jsn429c11038010';\n","export const pageTitle = 'Covid-19 predictions in India';\nexport const currentNumberOfCases = ' Current number of cases';\nexport const totalProjections =\n  'Total confirmed cases projections over the coming week: (±70 cases)';\nexport const howItWorks = 'How it works';\nexport const explanation =\n  \"The past week's data is analysed to determine the growth rate of total confirmed\" +\n  \"cases. A mean of that growth rate is then used to project the coming week's outcome\";\nexport const growthRateSource = 'Source: https://en.wikipedia.org/wiki/Exponential_growth';\nexport const disclaimerTitle = ' Disclaimer';\nexport const disclaimerBody =\n  'The developer holds no responsibility of the data displayed on this website. This data' +\n  'is merely speculative and is just a projection based on the current trend of change.' +\n  'For educational puposes only. Do your part. STAY HOME.';\n","import React from 'react';\nimport { Switch } from 'react-router-dom';\nimport Route from './route';\n\nimport Home from '../containers/Home';\n\nexport function Routes() {\n  return (\n    <Switch>\n      <Route path=\"/covid\" exact component={Home} />\n    </Switch>\n  );\n}\n\nexport default Routes;\n","import React from 'react';\nimport './App.css';\nimport { Router } from 'react-router-dom';\nimport history from './services/history';\nimport { Routes } from './routes';\n\nfunction App() {\n  return (\n    <Router history={history}>\n      <Routes />\n    </Router>\n  );\n}\n\nexport default App;\n","import Axios from 'axios';\nimport { apiKey } from '../utils/constants';\n\nconst APITimeout = 3000;\n\nconst baseUrl = 'https://coronavirus-monitor.p.rapidapi.com/';\n\n//By country, by date\nexport const getDataByCountryAndDate = 'coronavirus/history_by_country_and_date.php';\n\nconst contentTypeHeaders = {\n  'content-type': 'application/octet-stream',\n  'x-rapidapi-host': 'coronavirus-monitor.p.rapidapi.com',\n  'x-rapidapi-key': apiKey,\n};\n\nexport const unAuthAxios = (method, url, params) =>\n  Axios.request({\n    method: method,\n    baseURL: baseUrl,\n    url: url,\n    timeout: APITimeout,\n    headers: contentTypeHeaders,\n    params: params,\n  });\n","import { takeLatest, call, put } from 'redux-saga/effects';\nimport { FETCH_DATA, FETCH_DATA_SUCCESS, FETCH_DATA_FAILURE } from './actions';\nimport { unAuthAxios, getDataByCountryAndDate } from '../../networking';\nimport { getNthDay } from '../../utils';\nimport moment from 'moment';\n\nfunction* fetchData(action) {\n  try {\n    let accumulator = [];\n    var predictionAccumulator = [];\n    let rAccumulator = [];\n    for (let moment of action.payload.historicalDates) {\n      let { data: countryHistoricalStats } = yield call(\n        unAuthAxios,\n        'get',\n        getDataByCountryAndDate,\n        {\n          country: action.payload.country,\n          date: moment.format('YYYY-MM-DD'),\n        },\n      );\n      if (countryHistoricalStats.stat_by_country.length !== 0) {\n        accumulator.push(\n          countryHistoricalStats.stat_by_country[countryHistoricalStats.stat_by_country.length - 1],\n        );\n      }\n    }\n    let firstTotalCases = accumulator[accumulator.length - 1].total_cases;\n    for (let index = accumulator.length - 2; index > -1; index--) {\n      const record = accumulator[index];\n      let nthTotalCases = record.total_cases;\n      let logDifference = Math.log(nthTotalCases) - Math.log(firstTotalCases);\n      // eslint-disable-next-line\n    let logDiffByX = logDifference / ((accumulator.length - 1) - index);\n      let r = Math.exp(logDiffByX) - 1;\n      rAccumulator.push(r);\n    }\n    let meanR = average(rAccumulator);\n    Array.from({ length: accumulator.length - 1 }, (_, i) => {\n      let prediction = firstTotalCases * Math.pow(1 + meanR, i + accumulator.length);\n      predictionAccumulator.push(Math.ceil(prediction));\n      return null;\n    });\n    predictionAccumulator = predictionAccumulator.map((element, index) => {\n      return {\n        total_cases: element,\n        date: getNthDay(index + 1),\n      };\n    });\n    let lastWeekRecord = accumulator.map(record => {\n      return {\n        total_cases: record.total_cases,\n        date: moment(record.record_date, 'YYYY-MM-DD'),\n      };\n    });\n    let graphData = lastWeekRecord.reverse().concat(predictionAccumulator);\n    console.log(`Mean R: ${meanR}`);\n    yield put({\n      type: FETCH_DATA_SUCCESS,\n      payload: {\n        lastWeekData: lastWeekRecord,\n        nextWeekPredictions: predictionAccumulator,\n        graphData: graphData.map(data => ({\n          x: data.date,\n          y: data.total_cases,\n        })),\n        is_loading: false,\n      },\n    });\n  } catch (error) {\n    yield put({\n      type: FETCH_DATA_FAILURE,\n      payload: {\n        is_loading: false,\n        error: 'Something went wrong, Please try again',\n      },\n    });\n  }\n}\n\nconst average = arr => arr.reduce((p, c) => p + c, 0) / arr.length;\n\nexport default function* loginSaga() {\n  yield takeLatest(FETCH_DATA, fetchData);\n}\n","import { fork, all } from 'redux-saga/effects';\nimport LoginSaga from './containers/Home/saga';\n\nexport default function*() {\n  yield all([fork(LoginSaga)]);\n}\n","import createSagaMiddleware from 'redux-saga';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport rootSaga from './rootSaga';\nimport loginReducer from '../src/containers/Home/reducer';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst rootReducer = combineReducers({\n  loginReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './configureStore';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}